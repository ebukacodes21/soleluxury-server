// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.2
// source: soleluxury.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SoleluxuryClient is the client API for Soleluxury service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoleluxuryClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogoutResponse, error)
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error)
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	GetFirstStore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStoreResponse, error)
	GetStores(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStoresResponse, error)
	UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error)
	DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*DeleteStoreResponse, error)
	CreateBillboard(ctx context.Context, in *CreateBillboardRequest, opts ...grpc.CallOption) (*CreateBillboardResponse, error)
	GetBillboard(ctx context.Context, in *GetBillboardRequest, opts ...grpc.CallOption) (*GetBillboardResponse, error)
	GetBillboards(ctx context.Context, in *GetBillboardsRequest, opts ...grpc.CallOption) (*GetBillboardsResponse, error)
	UpdateBillboard(ctx context.Context, in *UpdateBillboardRequest, opts ...grpc.CallOption) (*UpdateBillboardResponse, error)
	DeleteBillboard(ctx context.Context, in *DeleteBillboardRequest, opts ...grpc.CallOption) (*DeleteBillboardResponse, error)
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	CreateSize(ctx context.Context, in *CreateSizeRequest, opts ...grpc.CallOption) (*CreateSizeResponse, error)
	GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error)
	GetSizes(ctx context.Context, in *GetSizesRequest, opts ...grpc.CallOption) (*GetSizesResponse, error)
	UpdateSize(ctx context.Context, in *UpdateSizeRequest, opts ...grpc.CallOption) (*UpdateSizeResponse, error)
	DeleteSize(ctx context.Context, in *DeleteSizeRequest, opts ...grpc.CallOption) (*DeleteSizeResponse, error)
	CreateColor(ctx context.Context, in *CreateColorRequest, opts ...grpc.CallOption) (*CreateColorResponse, error)
	GetColor(ctx context.Context, in *GetColorRequest, opts ...grpc.CallOption) (*GetColorResponse, error)
	GetColors(ctx context.Context, in *GetColorsRequest, opts ...grpc.CallOption) (*GetColorsResponse, error)
	UpdateColor(ctx context.Context, in *UpdateColorRequest, opts ...grpc.CallOption) (*UpdateColorResponse, error)
	DeleteColor(ctx context.Context, in *DeleteColorRequest, opts ...grpc.CallOption) (*DeleteColorResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetCategoryProducts(ctx context.Context, in *GetCategoryProductsRequest, opts ...grpc.CallOption) (*GetCategoryProductsResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOrdersResponse, error)
}

type soleluxuryClient struct {
	cc grpc.ClientConnInterface
}

func NewSoleluxuryClient(cc grpc.ClientConnInterface) SoleluxuryClient {
	return &soleluxuryClient{cc}
}

func (c *soleluxuryClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/LogoutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error) {
	out := new(CreateStoreResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/CreateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetFirstStore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetFirstStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetStores(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStoresResponse, error) {
	out := new(GetStoresResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error) {
	out := new(UpdateStoreResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/UpdateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*DeleteStoreResponse, error) {
	out := new(DeleteStoreResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/DeleteStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) CreateBillboard(ctx context.Context, in *CreateBillboardRequest, opts ...grpc.CallOption) (*CreateBillboardResponse, error) {
	out := new(CreateBillboardResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/CreateBillboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetBillboard(ctx context.Context, in *GetBillboardRequest, opts ...grpc.CallOption) (*GetBillboardResponse, error) {
	out := new(GetBillboardResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetBillboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetBillboards(ctx context.Context, in *GetBillboardsRequest, opts ...grpc.CallOption) (*GetBillboardsResponse, error) {
	out := new(GetBillboardsResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetBillboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) UpdateBillboard(ctx context.Context, in *UpdateBillboardRequest, opts ...grpc.CallOption) (*UpdateBillboardResponse, error) {
	out := new(UpdateBillboardResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/UpdateBillboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) DeleteBillboard(ctx context.Context, in *DeleteBillboardRequest, opts ...grpc.CallOption) (*DeleteBillboardResponse, error) {
	out := new(DeleteBillboardResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/DeleteBillboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) CreateSize(ctx context.Context, in *CreateSizeRequest, opts ...grpc.CallOption) (*CreateSizeResponse, error) {
	out := new(CreateSizeResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/CreateSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error) {
	out := new(GetSizeResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetSizes(ctx context.Context, in *GetSizesRequest, opts ...grpc.CallOption) (*GetSizesResponse, error) {
	out := new(GetSizesResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetSizes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) UpdateSize(ctx context.Context, in *UpdateSizeRequest, opts ...grpc.CallOption) (*UpdateSizeResponse, error) {
	out := new(UpdateSizeResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/UpdateSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) DeleteSize(ctx context.Context, in *DeleteSizeRequest, opts ...grpc.CallOption) (*DeleteSizeResponse, error) {
	out := new(DeleteSizeResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/DeleteSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) CreateColor(ctx context.Context, in *CreateColorRequest, opts ...grpc.CallOption) (*CreateColorResponse, error) {
	out := new(CreateColorResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/CreateColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetColor(ctx context.Context, in *GetColorRequest, opts ...grpc.CallOption) (*GetColorResponse, error) {
	out := new(GetColorResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetColors(ctx context.Context, in *GetColorsRequest, opts ...grpc.CallOption) (*GetColorsResponse, error) {
	out := new(GetColorsResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetColors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) UpdateColor(ctx context.Context, in *UpdateColorRequest, opts ...grpc.CallOption) (*UpdateColorResponse, error) {
	out := new(UpdateColorResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/UpdateColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) DeleteColor(ctx context.Context, in *DeleteColorRequest, opts ...grpc.CallOption) (*DeleteColorResponse, error) {
	out := new(DeleteColorResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/DeleteColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetCategoryProducts(ctx context.Context, in *GetCategoryProductsRequest, opts ...grpc.CallOption) (*GetCategoryProductsResponse, error) {
	out := new(GetCategoryProductsResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetCategoryProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleluxuryClient) GetOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/pb.Soleluxury/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoleluxuryServer is the server API for Soleluxury service.
// All implementations must embed UnimplementedSoleluxuryServer
// for forward compatibility
type SoleluxuryServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	LogoutUser(context.Context, *emptypb.Empty) (*LogoutResponse, error)
	CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error)
	GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error)
	GetFirstStore(context.Context, *emptypb.Empty) (*GetStoreResponse, error)
	GetStores(context.Context, *emptypb.Empty) (*GetStoresResponse, error)
	UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error)
	DeleteStore(context.Context, *DeleteStoreRequest) (*DeleteStoreResponse, error)
	CreateBillboard(context.Context, *CreateBillboardRequest) (*CreateBillboardResponse, error)
	GetBillboard(context.Context, *GetBillboardRequest) (*GetBillboardResponse, error)
	GetBillboards(context.Context, *GetBillboardsRequest) (*GetBillboardsResponse, error)
	UpdateBillboard(context.Context, *UpdateBillboardRequest) (*UpdateBillboardResponse, error)
	DeleteBillboard(context.Context, *DeleteBillboardRequest) (*DeleteBillboardResponse, error)
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	CreateSize(context.Context, *CreateSizeRequest) (*CreateSizeResponse, error)
	GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error)
	GetSizes(context.Context, *GetSizesRequest) (*GetSizesResponse, error)
	UpdateSize(context.Context, *UpdateSizeRequest) (*UpdateSizeResponse, error)
	DeleteSize(context.Context, *DeleteSizeRequest) (*DeleteSizeResponse, error)
	CreateColor(context.Context, *CreateColorRequest) (*CreateColorResponse, error)
	GetColor(context.Context, *GetColorRequest) (*GetColorResponse, error)
	GetColors(context.Context, *GetColorsRequest) (*GetColorsResponse, error)
	UpdateColor(context.Context, *UpdateColorRequest) (*UpdateColorResponse, error)
	DeleteColor(context.Context, *DeleteColorRequest) (*DeleteColorResponse, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	GetCategoryProducts(context.Context, *GetCategoryProductsRequest) (*GetCategoryProductsResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrders(context.Context, *emptypb.Empty) (*GetOrdersResponse, error)
	mustEmbedUnimplementedSoleluxuryServer()
}

// UnimplementedSoleluxuryServer must be embedded to have forward compatible implementations.
type UnimplementedSoleluxuryServer struct {
}

func (UnimplementedSoleluxuryServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSoleluxuryServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedSoleluxuryServer) LogoutUser(context.Context, *emptypb.Empty) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedSoleluxuryServer) CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedSoleluxuryServer) GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedSoleluxuryServer) GetFirstStore(context.Context, *emptypb.Empty) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstStore not implemented")
}
func (UnimplementedSoleluxuryServer) GetStores(context.Context, *emptypb.Empty) (*GetStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStores not implemented")
}
func (UnimplementedSoleluxuryServer) UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedSoleluxuryServer) DeleteStore(context.Context, *DeleteStoreRequest) (*DeleteStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedSoleluxuryServer) CreateBillboard(context.Context, *CreateBillboardRequest) (*CreateBillboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillboard not implemented")
}
func (UnimplementedSoleluxuryServer) GetBillboard(context.Context, *GetBillboardRequest) (*GetBillboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillboard not implemented")
}
func (UnimplementedSoleluxuryServer) GetBillboards(context.Context, *GetBillboardsRequest) (*GetBillboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillboards not implemented")
}
func (UnimplementedSoleluxuryServer) UpdateBillboard(context.Context, *UpdateBillboardRequest) (*UpdateBillboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillboard not implemented")
}
func (UnimplementedSoleluxuryServer) DeleteBillboard(context.Context, *DeleteBillboardRequest) (*DeleteBillboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillboard not implemented")
}
func (UnimplementedSoleluxuryServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedSoleluxuryServer) GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedSoleluxuryServer) GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedSoleluxuryServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedSoleluxuryServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedSoleluxuryServer) CreateSize(context.Context, *CreateSizeRequest) (*CreateSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSize not implemented")
}
func (UnimplementedSoleluxuryServer) GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedSoleluxuryServer) GetSizes(context.Context, *GetSizesRequest) (*GetSizesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSizes not implemented")
}
func (UnimplementedSoleluxuryServer) UpdateSize(context.Context, *UpdateSizeRequest) (*UpdateSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSize not implemented")
}
func (UnimplementedSoleluxuryServer) DeleteSize(context.Context, *DeleteSizeRequest) (*DeleteSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSize not implemented")
}
func (UnimplementedSoleluxuryServer) CreateColor(context.Context, *CreateColorRequest) (*CreateColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColor not implemented")
}
func (UnimplementedSoleluxuryServer) GetColor(context.Context, *GetColorRequest) (*GetColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColor not implemented")
}
func (UnimplementedSoleluxuryServer) GetColors(context.Context, *GetColorsRequest) (*GetColorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColors not implemented")
}
func (UnimplementedSoleluxuryServer) UpdateColor(context.Context, *UpdateColorRequest) (*UpdateColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColor not implemented")
}
func (UnimplementedSoleluxuryServer) DeleteColor(context.Context, *DeleteColorRequest) (*DeleteColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColor not implemented")
}
func (UnimplementedSoleluxuryServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedSoleluxuryServer) GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedSoleluxuryServer) GetCategoryProducts(context.Context, *GetCategoryProductsRequest) (*GetCategoryProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryProducts not implemented")
}
func (UnimplementedSoleluxuryServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedSoleluxuryServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedSoleluxuryServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedSoleluxuryServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedSoleluxuryServer) GetOrders(context.Context, *emptypb.Empty) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedSoleluxuryServer) mustEmbedUnimplementedSoleluxuryServer() {}

// UnsafeSoleluxuryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoleluxuryServer will
// result in compilation errors.
type UnsafeSoleluxuryServer interface {
	mustEmbedUnimplementedSoleluxuryServer()
}

func RegisterSoleluxuryServer(s grpc.ServiceRegistrar, srv SoleluxuryServer) {
	s.RegisterService(&Soleluxury_ServiceDesc, srv)
}

func _Soleluxury_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/LogoutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).LogoutUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/CreateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetFirstStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetFirstStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetFirstStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetFirstStore(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetStores(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/UpdateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).UpdateStore(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/DeleteStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).DeleteStore(ctx, req.(*DeleteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_CreateBillboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).CreateBillboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/CreateBillboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).CreateBillboard(ctx, req.(*CreateBillboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetBillboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetBillboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetBillboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetBillboard(ctx, req.(*GetBillboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetBillboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetBillboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetBillboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetBillboards(ctx, req.(*GetBillboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_UpdateBillboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).UpdateBillboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/UpdateBillboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).UpdateBillboard(ctx, req.(*UpdateBillboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_DeleteBillboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).DeleteBillboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/DeleteBillboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).DeleteBillboard(ctx, req.(*DeleteBillboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_CreateSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).CreateSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/CreateSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).CreateSize(ctx, req.(*CreateSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetSize(ctx, req.(*GetSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetSizes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetSizes(ctx, req.(*GetSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_UpdateSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).UpdateSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/UpdateSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).UpdateSize(ctx, req.(*UpdateSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_DeleteSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).DeleteSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/DeleteSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).DeleteSize(ctx, req.(*DeleteSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_CreateColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).CreateColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/CreateColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).CreateColor(ctx, req.(*CreateColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetColor(ctx, req.(*GetColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetColors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetColors(ctx, req.(*GetColorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_UpdateColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).UpdateColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/UpdateColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).UpdateColor(ctx, req.(*UpdateColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_DeleteColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).DeleteColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/DeleteColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).DeleteColor(ctx, req.(*DeleteColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetCategoryProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetCategoryProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetCategoryProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetCategoryProducts(ctx, req.(*GetCategoryProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soleluxury_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleluxuryServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Soleluxury/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleluxuryServer).GetOrders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Soleluxury_ServiceDesc is the grpc.ServiceDesc for Soleluxury service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Soleluxury_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Soleluxury",
	HandlerType: (*SoleluxuryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Soleluxury_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Soleluxury_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _Soleluxury_LogoutUser_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _Soleluxury_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _Soleluxury_GetStore_Handler,
		},
		{
			MethodName: "GetFirstStore",
			Handler:    _Soleluxury_GetFirstStore_Handler,
		},
		{
			MethodName: "GetStores",
			Handler:    _Soleluxury_GetStores_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _Soleluxury_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _Soleluxury_DeleteStore_Handler,
		},
		{
			MethodName: "CreateBillboard",
			Handler:    _Soleluxury_CreateBillboard_Handler,
		},
		{
			MethodName: "GetBillboard",
			Handler:    _Soleluxury_GetBillboard_Handler,
		},
		{
			MethodName: "GetBillboards",
			Handler:    _Soleluxury_GetBillboards_Handler,
		},
		{
			MethodName: "UpdateBillboard",
			Handler:    _Soleluxury_UpdateBillboard_Handler,
		},
		{
			MethodName: "DeleteBillboard",
			Handler:    _Soleluxury_DeleteBillboard_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Soleluxury_CreateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Soleluxury_GetCategory_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _Soleluxury_GetCategories_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Soleluxury_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Soleluxury_DeleteCategory_Handler,
		},
		{
			MethodName: "CreateSize",
			Handler:    _Soleluxury_CreateSize_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _Soleluxury_GetSize_Handler,
		},
		{
			MethodName: "GetSizes",
			Handler:    _Soleluxury_GetSizes_Handler,
		},
		{
			MethodName: "UpdateSize",
			Handler:    _Soleluxury_UpdateSize_Handler,
		},
		{
			MethodName: "DeleteSize",
			Handler:    _Soleluxury_DeleteSize_Handler,
		},
		{
			MethodName: "CreateColor",
			Handler:    _Soleluxury_CreateColor_Handler,
		},
		{
			MethodName: "GetColor",
			Handler:    _Soleluxury_GetColor_Handler,
		},
		{
			MethodName: "GetColors",
			Handler:    _Soleluxury_GetColors_Handler,
		},
		{
			MethodName: "UpdateColor",
			Handler:    _Soleluxury_UpdateColor_Handler,
		},
		{
			MethodName: "DeleteColor",
			Handler:    _Soleluxury_DeleteColor_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Soleluxury_CreateProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _Soleluxury_GetProducts_Handler,
		},
		{
			MethodName: "GetCategoryProducts",
			Handler:    _Soleluxury_GetCategoryProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Soleluxury_GetProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Soleluxury_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Soleluxury_DeleteProduct_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Soleluxury_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Soleluxury_GetOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soleluxury.proto",
}
