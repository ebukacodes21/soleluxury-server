syntax = "proto3";

package pb;

option go_package = "github.com/ebukacodes21/soleluxury-server/pb";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto"; 
import "rpc_user.proto";
import "rpc_billboard.proto";
import "rpc_category.proto";
import "rpc_store.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Soleluxury"
      version: "1.1"
      contact: {
        name: "soleluxury"
        url: ""
        email: "soleluxuryofficial@gmail.com"
      }
    }
};

service Soleluxury {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/create-user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a new user";
            summary: "create a new user";
        };
    }
    rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
        option (google.api.http) = {
            post: "/api/login-user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to login a user";
            summary: "Login a user";
        };
    }
    rpc LogoutUser (google.protobuf.Empty) returns (LogoutResponse) {
        option (google.api.http) = {
            get: "/api/logout-user"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to logout user";
            summary: "Logout user";
        };
    }
    rpc CreateStore (CreateStoreRequest) returns (CreateStoreResponse) {
        option (google.api.http) = {
            post: "/api/create-store"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a new store";
            summary: "create a new store";
        };
    }
    rpc GetStore (GetStoreRequest) returns (GetStoreResponse) {
        option (google.api.http) = {
            get: "/api/get-store"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get a store";
            summary: "Get a store";
        };
    }
    rpc GetFirstStore (google.protobuf.Empty) returns (GetStoreResponse) {
        option (google.api.http) = {
            get: "/api/get-first-store"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get the first store";
            summary: "Get first store";
        };
    }
    rpc GetStores (google.protobuf.Empty) returns (GetStoresResponse) {
        option (google.api.http) = {
            get: "/api/get-stores"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get stores";
            summary: "Get stores";
        };
    }
    rpc UpdateStore (UpdateStoreRequest) returns (UpdateStoreResponse) {
        option (google.api.http) = {
            patch: "/api/update-store"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to update a store";
            summary: "Update a store";
        };
    }
    rpc DeleteStore (DeleteStoreRequest) returns (DeleteStoreResponse) {
        option (google.api.http) = {
            post: "/api/delete-store"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to delete a store";
            summary: "Delete a store";
        };
    }
    rpc CreateBillboard (CreateBillboardRequest) returns (CreateBillboardResponse) {
        option (google.api.http) = {
            post: "/api/create-billboard"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a billboard";
            summary: "Create a billboard";
        };
    }
    rpc GetBillboard (GetBillboardRequest) returns (GetBillboardResponse) {
        option (google.api.http) = {
            get: "/api/get-billboard"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get a billboard";
            summary: "Get a billboard";
        };
    }
    rpc GetBillboards (GetBillboardsRequest) returns (GetBillboardsResponse) {
        option (google.api.http) = {
            get: "/api/get-billboards"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get all billboards for a store";
            summary: "Get all billboards for a store";
        };
    }
    rpc UpdateBillboard (UpdateBillboardRequest) returns (UpdateBillboardResponse) {
        option (google.api.http) = {
            patch: "/api/update-billboard"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to update a billboard";
            summary: "Update a billboard";
        };
    }
    rpc DeleteBillboard (DeleteBillboardRequest) returns (DeleteBillboardResponse) {
        option (google.api.http) = {
            post: "/api/delete-billboard"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to delete a billboard";
            summary: "Delete a billboard";
        };
    }
    rpc GetCategory (GetCategoryRequest) returns (GetCategoryResponse) {
        option (google.api.http) = {
            get: "/api/get-category"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get a category";
            summary: "Get a category";
        };
    }
}