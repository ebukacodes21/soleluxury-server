// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sizes.sql

package db

import (
	"context"
	"database/sql"
)

const createSize = `-- name: CreateSize :one
INSERT INTO sizes (
  store_id, store_name, name, value
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, store_id, store_name, name, value, created_at, updated_at
`

type CreateSizeParams struct {
	StoreID   int64  `db:"store_id" json:"store_id"`
	StoreName string `db:"store_name" json:"store_name"`
	Name      string `db:"name" json:"name"`
	Value     string `db:"value" json:"value"`
}

func (q *Queries) CreateSize(ctx context.Context, arg CreateSizeParams) (Size, error) {
	row := q.db.QueryRowContext(ctx, createSize,
		arg.StoreID,
		arg.StoreName,
		arg.Name,
		arg.Value,
	)
	var i Size
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.StoreName,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSize = `-- name: DeleteSize :exec
DELETE FROM sizes
WHERE id = $1
`

func (q *Queries) DeleteSize(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSize, id)
	return err
}

const getSize = `-- name: GetSize :one
SELECT id, store_id, store_name, name, value, created_at, updated_at FROM sizes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSize(ctx context.Context, id int64) (Size, error) {
	row := q.db.QueryRowContext(ctx, getSize, id)
	var i Size
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.StoreName,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSizes = `-- name: GetSizes :many
SELECT id, store_id, store_name, name, value, created_at, updated_at FROM sizes
WHERE store_id = $1
ORDER BY id
`

func (q *Queries) GetSizes(ctx context.Context, storeID int64) ([]Size, error) {
	rows, err := q.db.QueryContext(ctx, getSizes, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Size{}
	for rows.Next() {
		var i Size
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.StoreName,
			&i.Name,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSize = `-- name: UpdateSize :exec
UPDATE sizes
SET
  name = COALESCE($1, name),
  value = COALESCE($2, value)
WHERE 
  id = $3
  AND store_id = $4
`

type UpdateSizeParams struct {
	Name    sql.NullString `db:"name" json:"name"`
	Value   sql.NullString `db:"value" json:"value"`
	ID      int64          `db:"id" json:"id"`
	StoreID int64          `db:"store_id" json:"store_id"`
}

func (q *Queries) UpdateSize(ctx context.Context, arg UpdateSizeParams) error {
	_, err := q.db.ExecContext(ctx, updateSize,
		arg.Name,
		arg.Value,
		arg.ID,
		arg.StoreID,
	)
	return err
}
