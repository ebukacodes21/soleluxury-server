// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    store_id
)
VALUES (
    $1
)
RETURNING id, store_id, items, is_paid, phone, address, created_at, updated_at
`

func (q *Queries) CreateOrder(ctx context.Context, storeID int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, storeID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Items,
		&i.IsPaid,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT id, store_id, items, is_paid, phone, address, created_at, updated_at FROM orders
WHERE store_id = $1
ORDER BY id
`

func (q *Queries) GetOrders(ctx context.Context, storeID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrders, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Items,
			&i.IsPaid,
			&i.Phone,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
