// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  store_id, billboard_id, name
) VALUES (
  $1, $2, $3
)
RETURNING id, store_id, billboard_id, name, created_at, updated_at
`

type CreateCategoryParams struct {
	StoreID     int64  `db:"store_id" json:"store_id"`
	BillboardID int64  `db:"billboard_id" json:"billboard_id"`
	Name        string `db:"name" json:"name"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.StoreID, arg.BillboardID, arg.Name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.BillboardID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategory = `-- name: GetCategory :one
SELECT id, store_id, billboard_id, name, created_at, updated_at FROM categories
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.BillboardID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
