// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: store.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
    name
) VALUES (
  $1
) RETURNING id, name, created_at
`

func (q *Queries) CreateStore(ctx context.Context, name string) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore, name)
	var i Store
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const getFirstStore = `-- name: GetFirstStore :one
SELECT
    s.id AS store_id,
    s.name AS store_name,
    s.created_at AS store_created_at,
    -- Aggregated Billboards
    json_agg(
        json_build_object(
            'billboard_id', b.id,
            'billboard_label', b.label,
            'billboard_image_url', b.image_url,
            'billboard_created_at', b.created_at
        )
    ) AS billboards,
    -- Aggregated Categories
    json_agg(
        json_build_object(
            'category_id', c.id,
            'category_store_id', c.store_id,
            'category_billboard_id', c.billboard_id,
            'category_name', c.name,
            'category_created_at', c.created_at,
            'category_updated_at', c.updated_at
        )
    ) AS categories,
    -- Aggregated Sizes
    json_agg(
        json_build_object(
            'size_id', sz.id,
            'size_name', sz.name,
            'size_value', sz.value,
            'size_created_at', sz.created_at,
            'size_updated_at', sz.updated_at
        )
    ) AS sizes,
    -- Aggregated Colors
    json_agg(
        json_build_object(
            'color_id', cl.id,
            'color_name', cl.name,
            'color_value', cl.value,
            'color_created_at', cl.created_at,
            'color_updated_at', cl.updated_at
        )
    ) AS colors,
    -- Aggregated Products
    json_agg(
        json_build_object(
            'product_id', p.id,
            'product_name', p.name,
            'product_price', p.price,
            'product_is_featured', p.is_featured,
            'product_is_archived', p.is_archived,
            'product_description', p.description,
            'product_images', p.images,
            'product_created_at', p.created_at,
            'product_updated_at', p.updated_at
        )
    ) AS products,
    -- Aggregated Orders
    json_agg(
        json_build_object(
            'order_id', o.id,
            'order_items', o.items,
            'order_is_paid', o.is_paid,
            'order_phone', o.phone,
            'order_address', o.address,
            'order_created_at', o.created_at,
            'order_updated_at', o.updated_at
        )
    ) AS orders
FROM
    stores s
LEFT JOIN
    billboards b ON s.id = b.store_id
LEFT JOIN
    categories c ON s.id = c.store_id
LEFT JOIN
    sizes sz ON s.id = sz.store_id
LEFT JOIN
    colors cl ON s.id = cl.store_id
LEFT JOIN
    products p ON s.id = p.store_id
LEFT JOIN
    orders o ON s.id = o.store_id
GROUP BY
    s.id, s.name, s.created_at
ORDER BY
    s.created_at ASC  
LIMIT 1
`

type GetFirstStoreRow struct {
	StoreID        int64           `db:"store_id" json:"store_id"`
	StoreName      string          `db:"store_name" json:"store_name"`
	StoreCreatedAt time.Time       `db:"store_created_at" json:"store_created_at"`
	Billboards     json.RawMessage `db:"billboards" json:"billboards"`
	Categories     json.RawMessage `db:"categories" json:"categories"`
	Sizes          json.RawMessage `db:"sizes" json:"sizes"`
	Colors         json.RawMessage `db:"colors" json:"colors"`
	Products       json.RawMessage `db:"products" json:"products"`
	Orders         json.RawMessage `db:"orders" json:"orders"`
}

func (q *Queries) GetFirstStore(ctx context.Context) (GetFirstStoreRow, error) {
	row := q.db.QueryRowContext(ctx, getFirstStore)
	var i GetFirstStoreRow
	err := row.Scan(
		&i.StoreID,
		&i.StoreName,
		&i.StoreCreatedAt,
		&i.Billboards,
		&i.Categories,
		&i.Sizes,
		&i.Colors,
		&i.Products,
		&i.Orders,
	)
	return i, err
}

const getStore = `-- name: GetStore :one
SELECT
    s.id AS store_id,
    s.name AS store_name,
    s.created_at AS store_created_at,
    -- Aggregated Billboards
    json_agg(
        json_build_object(
            'billboard_id', b.id,
            'billboard_label', b.label,
            'billboard_image_url', b.image_url,
            'billboard_created_at', b.created_at
        )
    ) AS billboards,
    -- Aggregated Categories
    json_agg(
        json_build_object(
            'category_id', c.id,
            'category_store_id', c.store_id,
            'category_billboard_id', c.billboard_id,
            'category_name', c.name,
            'category_created_at', c.created_at,
            'category_updated_at', c.updated_at
        )
    ) AS categories,
    -- Aggregated Sizes
    json_agg(
        json_build_object(
            'size_id', sz.id,
            'size_name', sz.name,
            'size_value', sz.value,
            'size_created_at', sz.created_at,
            'size_updated_at', sz.updated_at
        )
    ) AS sizes,
    -- Aggregated Colors
    json_agg(
        json_build_object(
            'color_id', cl.id,
            'color_name', cl.name,
            'color_value', cl.value,
            'color_created_at', cl.created_at,
            'color_updated_at', cl.updated_at
        )
    ) AS colors,
    -- Aggregated Products
    json_agg(
        json_build_object(
            'product_id', p.id,
            'product_name', p.name,
            'product_price', p.price,
            'product_is_featured', p.is_featured,
            'product_is_archived', p.is_archived,
            'product_description', p.description,
            'product_images', p.images,
            'product_created_at', p.created_at,
            'product_updated_at', p.updated_at
        )
    ) AS products,
    -- Aggregated Orders
    json_agg(
        json_build_object(
            'order_id', o.id,
            'order_items', o.items,
            'order_is_paid', o.is_paid,
            'order_phone', o.phone,
            'order_address', o.address,
            'order_created_at', o.created_at,
            'order_updated_at', o.updated_at
        )
    ) AS orders
FROM
    stores s
LEFT JOIN
    billboards b ON s.id = b.store_id
LEFT JOIN
    categories c ON s.id = c.store_id
LEFT JOIN
    sizes sz ON s.id = sz.store_id
LEFT JOIN
    colors cl ON s.id = cl.store_id
LEFT JOIN
    products p ON s.id = p.store_id
LEFT JOIN
    orders o ON s.id = o.store_id
WHERE
    s.id = $1
GROUP BY
    s.id, s.name, s.created_at
`

type GetStoreRow struct {
	StoreID        int64           `db:"store_id" json:"store_id"`
	StoreName      string          `db:"store_name" json:"store_name"`
	StoreCreatedAt time.Time       `db:"store_created_at" json:"store_created_at"`
	Billboards     json.RawMessage `db:"billboards" json:"billboards"`
	Categories     json.RawMessage `db:"categories" json:"categories"`
	Sizes          json.RawMessage `db:"sizes" json:"sizes"`
	Colors         json.RawMessage `db:"colors" json:"colors"`
	Products       json.RawMessage `db:"products" json:"products"`
	Orders         json.RawMessage `db:"orders" json:"orders"`
}

func (q *Queries) GetStore(ctx context.Context, id int64) (GetStoreRow, error) {
	row := q.db.QueryRowContext(ctx, getStore, id)
	var i GetStoreRow
	err := row.Scan(
		&i.StoreID,
		&i.StoreName,
		&i.StoreCreatedAt,
		&i.Billboards,
		&i.Categories,
		&i.Sizes,
		&i.Colors,
		&i.Products,
		&i.Orders,
	)
	return i, err
}

const getStores = `-- name: GetStores :many
SELECT 
    s.id AS store_id,
    s.name AS store_name,
    s.created_at AS store_created_at,
    -- Aggregated Billboards
    json_agg(
        json_build_object(
            'billboard_id', b.id,
            'billboard_label', b.label,
            'billboard_image_url', b.image_url,
            'billboard_created_at', b.created_at
        )
    ) AS billboards,
    -- Aggregated Categories
    json_agg(
        json_build_object(
            'category_id', c.id,
            'category_store_id', c.store_id,  
            'category_billboard_id', c.billboard_id,  
            'category_name', c.name,
            'category_created_at', c.created_at,
            'category_updated_at', c.updated_at
        )
    ) AS categories,
    -- Aggregated Sizes
    json_agg(
        json_build_object(
            'size_id', sz.id,
            'size_name', sz.name,
            'size_value', sz.value,
            'size_created_at', sz.created_at,
            'size_updated_at', sz.updated_at
        )
    ) AS sizes,
    -- Aggregated Colors
    json_agg(
        json_build_object(
            'color_id', cl.id,
            'color_name', cl.name,
            'color_value', cl.value,
            'color_created_at', cl.created_at,
            'color_updated_at', cl.updated_at
        )
    ) AS colors,
    -- Aggregated Products
    json_agg(
        json_build_object(
            'product_id', p.id,
            'product_name', p.name,
            'product_price', p.price,
            'product_is_featured', p.is_featured,
            'product_is_archived', p.is_archived,
            'product_description', p.description,
            'product_images', p.images,
            'product_created_at', p.created_at,
            'product_updated_at', p.updated_at
        )
    ) AS products,
    -- Aggregated Orders
    json_agg(
        json_build_object(
            'order_id', o.id,
            'order_items', o.items,
            'order_is_paid', o.is_paid,
            'order_phone', o.phone,
            'order_address', o.address,
            'order_created_at', o.created_at,
            'order_updated_at', o.updated_at
        )
    ) AS orders
FROM
    stores s
LEFT JOIN
    billboards b ON s.id = b.store_id
LEFT JOIN
    categories c ON s.id = c.store_id
LEFT JOIN
    sizes sz ON s.id = sz.store_id
LEFT JOIN
    colors cl ON s.id = cl.store_id
LEFT JOIN
    products p ON s.id = p.store_id
LEFT JOIN
    orders o ON s.id = o.store_id
GROUP BY
    s.id, s.name, s.created_at  -- Add s.name and s.created_at to the GROUP BY clause
ORDER BY
    s.id, s.created_at ASC
LIMIT $1
`

type GetStoresRow struct {
	StoreID        int64           `db:"store_id" json:"store_id"`
	StoreName      string          `db:"store_name" json:"store_name"`
	StoreCreatedAt time.Time       `db:"store_created_at" json:"store_created_at"`
	Billboards     json.RawMessage `db:"billboards" json:"billboards"`
	Categories     json.RawMessage `db:"categories" json:"categories"`
	Sizes          json.RawMessage `db:"sizes" json:"sizes"`
	Colors         json.RawMessage `db:"colors" json:"colors"`
	Products       json.RawMessage `db:"products" json:"products"`
	Orders         json.RawMessage `db:"orders" json:"orders"`
}

func (q *Queries) GetStores(ctx context.Context, limit int32) ([]GetStoresRow, error) {
	rows, err := q.db.QueryContext(ctx, getStores, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStoresRow{}
	for rows.Next() {
		var i GetStoresRow
		if err := rows.Scan(
			&i.StoreID,
			&i.StoreName,
			&i.StoreCreatedAt,
			&i.Billboards,
			&i.Categories,
			&i.Sizes,
			&i.Colors,
			&i.Products,
			&i.Orders,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :exec
UPDATE stores
SET
  name = COALESCE($1, name)
WHERE 
  id = $2
`

type UpdateStoreParams struct {
	Name sql.NullString `db:"name" json:"name"`
	ID   int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) error {
	_, err := q.db.ExecContext(ctx, updateStore, arg.Name, arg.ID)
	return err
}
